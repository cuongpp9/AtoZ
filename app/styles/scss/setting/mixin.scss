@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type == string {
    $class: $min;
    @if $class == xs {
      @media (max-width: 575px) {
        @content;
      }
    } @else if $class == sm {
      @media (max-width: 767px) {
        @content;
      }
    } @else if $class == md {
      @media (max-width: 991px) {
        @content;
      }
    } @else if $class == lg {
      @media (max-width: 1199px) {
        @content;
      }
    } @else if $class == sm-up {
      @media (min-width: 576px) {
        @content;
      }
    } @else if $class == md-up {
      @media (min-width: 768px) {
        @content;
      }
    } @else if $class == lg-up {
      @media (min-width: 992px) {
        @content;
      }
    } @else if $class == hlg-up {
      @media (min-width: 1200px) {
        @content;
      }
    } @else {
      @warn "Breakpoint mixin supports: xs, sm, md, lg, mxs, msm, mmd, mlg";
    }
  } @else if $type == number {
    $query: 'all' !default;
    @if $min != 0 and $max != 0 {
      $query: '(min-width: #{$min}) and (max-width: #{$max})';
    } @else if $min != 0 and $max == 0 {
      $query: '(min-width: #{$min})';
    } @else if $min == 0 and $max != 0 {
      $query: '(max-width: #{$max})';
    }
    @media #{$query} {
      @content;
    }
  }
}

@mixin hover-light($isActive) {
  @if $isActive == 1 {
    &.active {
      color: $primary-color;
    }
  }
  @include breakpoint(md-up) {
    &:hover {
      color: $primary-color;
    }
  }
  @include breakpoint(md) {
    &:active {
      color: $primary-color;
    }
  }
}

@mixin hover-opacity() {
  opacity: 1;
  -webkit-transition: 0.3s ease-in-out;
  transition: 0.3s ease-in-out;
  @include breakpoint(md-up) {
    &:hover {
      opacity: 0.6;
    }
  }
  @include breakpoint(md) {
    &:active {
      opacity: 0.6;
    }
  }
}

@mixin hover-mobile() {
  @include breakpoint(md-up) {
    &:hover {
      @content;
    }
  }
  @include breakpoint(md) {
    &:active {
      @content;
    }
  }
}

@mixin clearfix() {
  .temp,
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin align-middle-group() {
  position: relative;
  > * {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin last() {
  -webkit-box-sizing: inherit;
  &:last-child {
    @content;
  }
}

@mixin not-last() {
  .temp,
  &:not(:last-child) {
    @content;
  }
}

@mixin list-space($value) {
  @include not-last {
    margin-right: $value;
  }
}

@mixin list-enter($value) {
  @include not-last {
    margin-bottom: $value;
  }
}

@mixin self-clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin central {
  & {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin central-vertical {
  position: relative;
  > * {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin central-flex {
  & {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

@mixin central-inline-flex {
  & {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

@mixin central-vertical-flex {
  display: inline-flex;
  flex-direction: column;
  justify-content: center;
}
.reset-hover-opacity {
  &:hover,
  &:active,
  &:focus {
    opacity: 1;
  }
}

@mixin box-shadow {
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face(
  $name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg
) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_'),
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype',
  );

  @each $ext in $exts {
    $extmod: if(
      map-has-key($extmods, $ext),
      $ext + map-get($extmods, $ext),
      $ext
    );
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + '.' + $extmod)) format(quote($format)),
      comma
    );
  }

  @font-face {
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
